# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/126M9nX1wlmpvqdGSMkH1m_9Am_0UB50W

#**Netflix Titles Analysis Dashboard**

## Installing Stream lit
"""

!pip install streamlit pyngrok

!pip install streamlit pyngrok pandas matplotlib seaborn joblib

"""##Write app.py file"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# import seaborn as sns
# import joblib
# import numpy as np
# 
# # Setting page configuration
# st.set_page_config(page_title="Netflix Titles Analysis", layout="wide")
# # Loading processed data and model
# @st.cache_data
# def load_data_and_model():
#     df = pd.read_csv('processed_netflix_titles.csv')
#     model = joblib.load('logistic_model.pkl')
#     le = joblib.load('label_encoder.pkl')
#     return df, model, le
# # Main app
# def main():
#     st.title("Netflix Titles Analysis Dashboard")
# 
#     # Loading data and model
#     df, model, le = load_data_and_model()
# 
#     # Sidebar for filtering
#     st.sidebar.header("Filter Options")
#     content_type = st.sidebar.selectbox("Content Type", ["All", "Movie", "TV Show"])
#     min_year = int(df['release_year'].min())
#     max_year = int(df['release_year'].max())
#     year_range = st.sidebar.slider("Release Year Range", min_year, max_year, (min_year, max_year))
# 
#     # Filtering data
#     filtered_df = df.copy()
#     if content_type != "All":
#         filtered_df = filtered_df[filtered_df['type'] == content_type]
#     filtered_df = filtered_df[(filtered_df['release_year'] >= year_range[0]) & (filtered_df['release_year'] <= year_range[1])]
# 
#     # Displaying dataset
#     st.header("Dataset Preview")
#     st.dataframe(filtered_df.head(10))
# 
#     # Visualizations
#     st.header("Visualizations")
# 
#     # Content type distribution
#     st.subheader("Content Type Distribution")
#     fig, ax = plt.subplots()
#     sns.countplot(data=filtered_df, x='type', ax=ax)
#     plt.title('Distribution of Content Types')
#     st.pyplot(fig)
# 
#     # Top 10 genres
#     st.subheader("Top 10 Genres")
#     genres = filtered_df['listed_in'].str.split(',', expand=True).stack().str.strip().value_counts().head(10)
#     fig, ax = plt.subplots()
#     genres.plot(kind='bar', ax=ax)
#     plt.title('Top 10 Genres')
#     st.pyplot(fig)
# 
#     # Release year distribution
#     st.subheader("Release Year Distribution")
#     fig, ax = plt.subplots()
#     sns.histplot(filtered_df['release_year'], bins=30, kde=True, ax=ax)
#     plt.title('Distribution of Release Years')
#     st.pyplot(fig)
# 
#     # Model prediction
#     st.header("Predict Content Type")
#     st.write("Enter details to predict if a title is a Movie or TV Show:")
# 
#     release_year = st.number_input("Release Year", min_value=1900, max_value=2025, value=2020)
#     duration = st.number_input("Duration (minutes for Movies, seasons for TV Shows)", min_value=1, value=90)
#     genre_count = st.number_input("Number of Genres", min_value=1, max_value=10, value=2)
#     content_age = 2025 - release_year
# 
#     if st.button("Predict"):
#         features = np.array([[release_year, duration, genre_count, content_age]])
#         prediction = model.predict(features)
#         predicted_type = le.inverse_transform(prediction)[0]
#         st.write(f"Predicted Content Type: **{predicted_type}**")
# 
# if __name__ == "__main__":
#     main()

!ls /content/

!ngrok diagnose

## Adding Auth Key

!ngrok config add-authtoken 30Uh3ODbH06aiN3Dle0W3oJgLR4_3uUf32mG9Tmpk6u7AXEu8

"""## Displaying Streamlit Web app"""

from pyngrok import ngrok

public_url = ngrok.connect(8501)
print(f"Streamlit app is running at: {public_url}")
!streamlit run app.py

from pyngrok import ngrok

public_url = ngrok.connect(8501)
print(f"Streamlit app is running at: {public_url}")
!streamlit run app.py